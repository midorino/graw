#+TITLE:     GRAW - Logs
#+SUBTITLE:  Garmin Race Around the World - Logs
#+AUTHOR:    Midorino
#+EMAIL:     midorino@protonmail.com
#+DESCRIPTION: What has been done
#+LANGUAGE:  en

#+HTML_LINK_HOME: https://midorino.github.io

* 2020-11-04
CLOSED: [2020-11-04]
:PROPERTIES:
:CREATED:  [2020-11-04]
:END:

Quick study for Garmin API x Google Maps API.

Only for business ; backup: manual (or semi-auto?) data transfers.

* 2020-11-22
:PROPERTIES:
:CREATED:  [2020-11-22]
:END:

For development workflow, switch GitHub Pages settings to current working branch ("develop" or "feat-*").

Consider some delay (1-2 minutes) for GitHub to actually commit updates from repository to GitHub Pages.

** [FEAT-AAA] Test of [[https://leafletjs.com/][Leaflet.js]] library.

Check the [[https://leafletjs.com/examples/quick-start/][Quick Start Guide]] examples.

[[https://leafletjs.com/examples/quick-start/example-basic.html][Basic Example]] local test (i.e. open local files from web browser) is successful.

But wonder about the first argument of =L.tileLayer()= call - seems to be an API key - is it freely usable?

Actually, "Leaflet Basic example" description explains this: the "mapbox/streets-v11" tiles from Mapboxâ€™s Static Tiles API are used - and in order to use tiles from Mapbox, an access token must be requested.

But for now, the provided Leaflet access token will be used.
The access token value is simply moved to a variable to ease its future update.

Note that a GET request is made in live version for "https://midorino.github.io/graw/favicon.ico" - unsuccessful. But no element from "index.html" seems to be the source of this request (maybe in the Leaflet CSS or JS?).

** [FEAT-AAB] Leaflet Drawing

Consider [[https://leafletjs.com/examples/quick-start/example-overlays.html]] and [[https://leafletjs.com/examples/quick-start/example-popups.html]] and easily add marker, circle, polygons and popups (attached to figures or standalones).

Examples description explains that use =openOn= instead of =addTo= to handle automatic closing of a previously opened popup when opening a new one which is good for usability. But it seems to be no pratical difference when both are tested.

** [FEAT-AAC] Leaflet Events

Consider final part of Leaflet "Quick Start Guide" relative to events management - NSTR.

** [FEAT-AAD] Leaflet GPX Plugin

Based on [[https://github.com/mpetazzoni/leaflet-gpx]] and [[https://mpetazzoni.github.io/leaflet-gpx/]].

Use of a shortened version of +demo.gpx+ from +Leaflet GPX+ example as input.

But local test impossible for "Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at file:///home/strobilyon/O/D/GRAW/test.gpx. (Reason: CORS request not http)."

Backup solution: GPX directly put as a string in JS.

Default marker icons of the plugin may be changed - for now, pull the default icons from plugin repository.

Add GPX waypoint for test purpose ([[https://www.topografix.com/gpx_manual.asp#wpt]] for syntax).
Note that =<wpt>= does not count as =<trkpt>= - both are required to get a =<wpt>= displayed on a =<trkpt>=.
Add some metadata to =<wpt>= (=<name>=, =<desc>=) - displayed by default when clicked.
Prelude to "checkpoints" (cities, POI, aso) in GRAW challenge?

Test some line styling ([[https://github.com/mpetazzoni/leaflet-gpx#line-styling]]) from GPX data and with JS override (with two GPX data sources - preferred method - complete track vs progress track).

** Local testing environment

XAMPP, WAMP or better here: Python HTTP Server ([[https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server]]) and test at =http://localhost:8000/=.

** [FEAT-AAE] Relative track progress

Consider a giving progress distance, display an approximate progress track over the complete track base on its complete distance.

Get track total distance is easy with "Leaflet GPX" plugin +get_distance()+.

But get parsed elements (points or tracks) does not seem to be as immediate.

Analysis of =gpx.js= (main JS in "Leaflet GPX" library): member +_layers+ seems to contain corresponding data but no solution to access it.
Alternative: keep "Leaflet GPX" plugin to draw tracks, use another method to parse and calculate it.

[[https://luuka.github.io/GPXParser.js/]] seems a good candidate.

No remote repository for =GPXParser.js= (test with GitHub rep not functionnal) ; JS downloaded in local web folder.

First, GPX file must be converted to a string - more difficult than it seems but found one possible hack: [[https://stackoverflow.com/questions/36921947/read-a-server-side-file-using-javascript/41133213]].

Note that =GPXParser= and =Leaflet GPX= give slightly different total distances results.

=GPXParse= allows to loop through the points and accumulated distances (comparison with progress distance - fix variable here but actually calculated from Garmin challenge number of steps).

Then, remove not covered-by-progress elements from GPX parsed object, then export to GeoJSON data, which is drawable with =LeafletGPX=.

Code cleaning is required but functionnal.
