#+TITLE:     GRAW - Log - 2020-11-25
#+SUBTITLE:  Garmin Race Around the World - Log - 2020-11-25
#+AUTHOR:    Midorino
#+EMAIL:     midorino@protonmail.com
#+DESCRIPTION: What has been done
#+LANGUAGE:  en

#+HTML_LINK_HOME: https://midorino.github.io

* 2020-11-25
CLOSED: [2020-11-25]
:PROPERTIES:
:CREATED:  [2020-11-25]
:END:

** Code review

*** Javascript

**** Validation

http://beautifytools.com/javascript-validator.php

- Use of +let+ keyword for variables declarations

+var+ and +let+ are both used for variable declaration ; but difference : +var+ is function scoped and +let+ is block scoped - +var+ is defined throughout the program as compared to +let+.

For now, update all +let+ to +var+.

- Tool offers a beautify option too.

-----

https://codebeautify.org/jsvalidate

- Use of =strict= mode

Apply =strict= mode for entire =index.js= script (combination of function +strict()+ and +use 'strict'+).

As =index.js= is here like a JS module, use of the "function" form of =strict= mode.

Ref: [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode]].

- Various syntax fixes.

**** Beautify

- https://beautifier.io/
- /https://codebeautify.org/
- *http://beautifytools.com*

*** HTML

**** Validation

http://validator.w3.org/

NSTR.

** [FEAT-AAG] Asynchronous GPX data loading

In order to improve responsiveness, main script =index.js= must not be waiting for resources loading (here: GPX data).
"Lazy" (or asynchronous) loading must be used.

For this, the +async+ keyword is used when calling the concerned +function+ (here: +loadFile()+).

There seems to be multiple ways to handle this problematic here:

- *https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/async_function*
- https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await
- https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises

Here, mainly based on the below structure:

#+BEGIN_SRC js
function loadFile() {
  return new Promise(resolve => {
    setTimeout(() => {
        // Load file content into 'result'
        resolve(result);
    }, 5000);
  });
}

async function loadGPX() {
  var result = await loadFile(gpxFilePath);
  // Rest of the process
}

var gpxPath = "..."
loadGPX(gpxPath); // ASAP
#+END_SRC

For test purpose, +setTimeout()+ is added in +loadFile()+ to mimic long awaited response.

** JS rewriting

- Naming conventions
  - https://www.robinwieruch.de/javascript-naming-conventions
  - https://www.freecodecamp.org/news/javascript-naming-conventions-dos-and-don-ts-99c0e2fdd78a/
- +var+ vs +let+ (anticipation for region / runnner loop)

** Fix GPX track name display

For now, the name displayed is the route's one (and not the global GPX file name) (+<rte>/<name>+).

** [FEAT-AAH] Complete CRAW GPX data

*** Add CRAW region 2 GPX data

Directions: https://www.google.com/maps/dir/Arboletes,+Antioquia,+Colombie/Medellín,+Antioquia,+Colombie/Cali,+Valle+del+Cauca,+Colombie/Quito,+Équateur/Guayaquil,+Équateur/Trujillo,+Pérou/Huánuco,+Pérou/Pisco,+Pérou/Tacna,+Pérou

NSTR.

*** Add loop through regions GPX data

JS error during region 2 GPX file loading: "Erreur d’analyse XML : erreur de syntaxe"

According to online XML validators, data structure is valid.

PythonAnyWhere web app reloading does not solve the issue (as new asset 'region-2-andes.gpx' has been added).

From dev tool "Network" in Firefox, ressource 'region-2-andes.gpx' request gets "403" status response ("Forbidden") ; constraint of office working environment (or PythonAnyWhere)?

**** TODO In +loadFile()+, through +xmlhttp.status+, error(s) in external files loading must be handled.

Actually, region GPX file loading works in production environment.

*** Add CRAW other regions GPX data

- Region 3 - Pampas: https://www.google.fr/maps/dir/Tacna,+Pérou/Calama,+Chili/Salta,+Province+de+Salta,+Argentine/Córdoba,+Argentine/Buenos+Aires,+Ville+Autonome+de+Buenos+Aires,+Argentine/Comodoro+Rivadavia,+Chubut,+Argentine/Río+Gallegos,+Province+de+Santa+Cruz,+Argentine/Ushuaia,+Terre+de+Feu,+Argentine
- Region 4 - Antarctica: Base General Bernardo O'Higgins, Antarctique > Base antarctique Mario-Zucchelli, Antarctique x [[https://gpxstudio.github.io/]] x Manual migration
- Region 5 - Down Under: https://www.google.fr/maps/dir/Melbourne+Victoria,+Australie/Adelaide+Australie-Méridionale,+Australie/Port+Augusta+Australie-Méridionale,+Australie/Alice+Springs+Territoire+du+Nord,+Australie/Daly+Waters+Territoire+du+Nord,+Australie/Darwin+Territoire+du+Nord,+Australie
- Region 6 - The Islands: https://www.google.fr/maps/dir/Díli,+Timor-Leste/Denpasar,+Denpasar+City,+Bali,+Indonésie/Surabaya,+Surabaya+City,+Java+oriental,+Indonésie/Semarang,+Semarang+City,+Java+central,+Indonésie/Cirebon,+Cirebon+City,+Java+occidental,+Indonésie/Jakarta,+Indonésie/Jambi,+Jambi+City,+Jambi,+Indonésie/Pekanbaru,+Pekanbaru+City,+Riau,+Indonésie/Dumai,+Riau,+Indonésie
- Region 7 - Malay Peninsula: https://www.google.fr/maps/dir/Muar,+Johor,+Malaisie/Port+Kelang,+Selangor,+Malaisie/Teluk+Intan,+Perak,+Malaisie/Taiping,+Perak,+Malaisie/Sungai+Petani,+Kedah,+Malaisie/Jitra,+Kedah,+Malaisie/Hat+Yai/Khao+Luang+National+Park/Surat+Thani/Province+de+Chumpon,+Thaïlande/Mergui,+Myanmar+(Birmanie)/Tavoy,+Myanmar+(Birmanie)/Moulmein,+Myanmar+(Birmanie)/Naypyidaw,+Myanmar+(Birmanie)/Mandalay,+Myanmar+(Birmanie)/Imphāl,+Manipur,+Inde
- Region 8 - Indian Subcontinent: https://www.google.fr/maps/dir/Imphāl,+Manipur,+Inde/Dacca,+Bangladesh/Pakur,+Jharkhand,+Inde/Patna,+Bihar,+Inde/Lucknow,+Uttar+Pradesh,+Inde/New+Delhi,+Delhi,+Inde/Ludiana,+Pendjab,+Inde/Lahore,+Pakistan
- Region 9 - The Stans: https://www.google.fr/maps/dir/Lahore,+Pakistan/Islamabad,+Pakistan/Kaboul,+Afghanistan/Termez,+Ouzbékistan/Boukhara,+Ouzbékistan/Ourguentch,+Ouzbékistan/44.79813236391235,+56.13675289141385/Atyraou,+Kazakhstan/Astrakhan,+Russie
- Region 10 - Europe: https://www.google.fr/maps/dir/Astrakhan,+Russie/Louhansk,+Ukraine/Tallinn,+Estonie/Helsinki,+Finlande/Oulu,+Finlande/Kautokeino,+Norvège/Alta,+Norvège/Olderfjord,+Norvège
- Region 11 - Great White North: Prudhoe Bay, Alaska > Sagwon, Alaska > Anaktuvuk Pass, Alaska > Coldfoot > Stevens Village > Fairbanks > Chicken > Carmacks > Whitehorse > Watson Lake > Fort Nelson > Rivière-la-Paix > Slave Lake > Edmonton > Calgary > Sweet Grass x [[https://gpxstudio.github.io/]] x Manual migration
- Region 12 - Lower 48: https://www.google.fr/maps/dir/Sweet+Grass,+Montana,+États-Unis/Brownsville,+Texas,+États-Unis

**** TODO Region 11 GPX file too big - try another draw with =gpxstudio.github.io= but with settings without automatic "roads tracks" - even though with manual migration, file size ~ 1 MB.

**** TODO Add annexes travels (boat, plane) in differentiate GPX file(s) / loop.

** Update mock progress data

Best mock display with progress data = 25 % of complete distance.
